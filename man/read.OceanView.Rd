% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.OceanView.R
\name{read.OceanView}
\alias{read.OceanView}
\alias{read.OceanView2}
\alias{read.OceanView0}
\alias{read.OceanView.ascii}
\alias{read.OceanView.ascii2}
\alias{read.OceanView.ascii0}
\alias{read.OceanView.ts}
\alias{read.OceanView.ts2}
\alias{read.OceanView.ts0}
\title{[!v0.3] Read spectroscopic OceanView file}
\usage{
read.OceanView(
  file,
  dec = ".",
  parse_filename = NULL,
  ignore.case = FALSE,
  xlab = NULL,
  ylab = "I, a.u.",
  last_headerline_text = ">>>>>Begin Spectral Data<<<<<",
  software = "OceanView",
  version_ = "1.5.2",
  n = 17,
  file_format = c("auto", "ascii", "ts", "timeseries")[1]
)

read.OceanView2(file, dec = ",", ..., file_format = "auto")

read.OceanView0(
  file,
  dec = ".",
  ...,
  file_format = "auto",
  parse_filename = parser_1
)

read.OceanView.ascii(file, dec = ".", ..., file_format = "ascii")

read.OceanView.ascii2(file, dec = ",", ..., file_format = "ascii")

read.OceanView.ascii0(
  file,
  dec = ".",
  ...,
  file_format = "ascii",
  parse_filename = parser_1
)

read.OceanView.ts(file, dec = ".", ..., file_format = "ts")

read.OceanView.ts2(file, dec = ",", ..., file_format = "ts")

read.OceanView.ts0(
  file,
  dec = ".",
  ...,
  file_format = "ts",
  parse_filename = parser_1
)
}
\arguments{
\item{file}{(string) A name of OcenView file .}

\item{dec}{("." | ",") The character used in the file for decimal points , e.g.
period (\code{"."}) or comma (\code{","}).}

\item{parse_filename}{(function | string | NULL) Either a function that
parses string of filename and
extracts relevant information,\cr or a regular
expression to be used to parse file name and extract
relevant information,\cr or \code{NULL}.}

\item{ignore.case}{A logical that indicates if regular extression in
\code{parse_filename} is case sensitive.
Applies ONLY if \code{parse_filename} is a string with regular
expression.}

\item{xlab}{(string | NULL) Label for x (wavelength) axis.
 If \code{NULL} (defaut) -
the label is selected automatically.}

\item{ylab}{(string) Label for y (intensity) axis. Defaut is \code{"I, a.u."}.}

\item{last_headerline_text}{(string) A string, that indicates the last header line.
Default is \code{">>>>>Begin Spectral Data<<<<<"}.}

\item{software}{("OceanView" | "OOIBase32") Name of software, that created the file.}

\item{version_}{("1.5.2" | "1.5.0" | string) A version of OceanView file.
Curently supported  versions are "1.5.2" (or newer) and "1.5.0".}

\item{n}{(integer) Number of header lines to be scanned . Default is 17.
These lines include the header line indicated in
\code{last_headerline_text}.}

\item{file_format}{(\code{"auto"}|\code{"ascii"}|\code{"ts"}|\code{"timeseries"})
A string to determine format of spectroscopic OceanView file:\cr
\code{"ascii"} for ASCII file with header;\cr
\code{"ts"} or \code{"timeseries"} for timeseries file with
header;\cr
\code{"auto"} (default) - automatically determines the format of
file, but may result in a \bold{slower} performance than options above.}
}
\value{
A \code{\link[=hyperSpec-class]{hyperSpec}} object with technical and
        spectroscopic information from file \code{file}.
}
\description{
Read contents of \bold{one} spectroscopic \bold{file} produced by OcenView software
(Ocen Optics, Inc.) to \code{\link[=hyperSpec-class]{hyperSpec}} object.
 Supported file formats areeither \emph{TimeSeries} data file with header or
 \emph{ASCII} data file with header.
 Suported versions of file are `OceanView 1.5.2` and `OceanView 1.5.0?`
}
\details{
In \code{read.OceanView} the default decimal symbol is \emph{period}
         (\code{.}). In \code{read.OceanView2} - \emph{comma} (\code{,}).
}
\examples{
\donttest{
\dontrun{

library(spHelper)

read.OceanView("Spectra.txt")
read.OceanView("Spectra.txt", dec = ",")
read.OceanView2("Spectra.txt")


# Read several files to one `hyperspec` object:

Files   <- dir()[1:4]                     # 4 files are sellected
sp_list <- lapply(Files, read.OceanView)  # Makes a list of objects
sp      <- collapse(sp_list)              # Makes one object

plotmat(sp)

# -------------------------------------------------------------------

files <- dir("data-raw/demo spectra", full.names = TRUE)

# ts example:

file.ts <- files[3]
read.OceanView(file.ts) \%T>\% plot(col=2:3) \%>\%  summary_hyData

# ascii examples:

file.ascii.Raman <- files[1]
read.OceanView(file.ascii.Raman) \%T>\% plot(col=2) \%>\%  summary_hyData

file.ascii.Fluorescence <- files[2]
read.OceanView(file.ascii.Fluorescence) \%T>\% plot(col=4) \%>\%  summary_hyData
read.OceanView(file.ascii.Fluorescence)$..  \%>\% head

# .Scope example:
file.Scope <- files[4]
read.OOIBase32(file.Scope) \%T>\% plot(col=5) \%>\%  summary_hyData
read.OOIBase32(file.Scope)$..  \%>\% head
# -------------------------------------------------------------------
}}
}
\seealso{
Other functions to read spectroscopic data: 
\code{\link{file}},
\code{\link{read.OOIBase32}()},
\code{\link{read.OceanView.header}()}

Other \pkg{spHelper} functions for spectroscopy and \pkg{hyperSpec}: 
\code{\link{IQR_outliers}()},
\code{\link{binning}()},
\code{\link{file}},
\code{\link{gapDer}()},
\code{\link{hy2mat}()},
\code{\link{hyAdd_Label_wl}()},
\code{\link{hyAdd_Labels_PAP_PD_2014}()},
\code{\link{hyAdd_Labels_TD2009}()},
\code{\link{hyAdd}()},
\code{\link{hyDrop_NA}()},
\code{\link{hyGet_palette}()},
\code{\link{hyRm_palette}()},
\code{\link{mad_outliers}()},
\code{\link{mean_Nsd}()},
\code{\link{median_Nmad}()},
\code{\link{plot_hyPalette}()},
\code{\link{prepare_PAP_RK_2014__MATLAB_failui}()},
\code{\link{read.OOIBase32}()},
\code{\link{read.OceanView.header}()},
\code{\link{read.sp.csv2}()},
\code{\link{read3csv2hy}()},
\code{\link{replace_spc}()},
\code{\link{sd_outliers}()},
\code{\link{spStat}()},
\code{\link{sp_class_perform}()}
}
\author{
Vilmantas Gegzna
}
\concept{\pkg{spHelper} functions for spectroscopy and \pkg{hyperSpec}}
\concept{functions to read spectroscopic data}
