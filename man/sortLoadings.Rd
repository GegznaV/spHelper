% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sortLoadings.R
\name{sortLoadings}
\alias{sortLoadings}
\title{[!+] Process (Sort, flip, name, etc.) spectra of components (a.k.a. loadings)}
\usage{
sortLoadings(
  loadings,
  sp = NULL,
  PCA.flip = FALSE,
  sort = TRUE,
  label.spc = "Comp. spectra",
  wl.units = "nm"
)
}
\arguments{
\item{loadings}{Components' spectra (loadings) as either a matrix or a
\code{\link[=hyperSpec-class]{hyperSpec}} object.}

\item{sp}{\code{\link[=hyperSpec-class]{hyperSpec}} object.}

\item{PCA.flip}{Logical. If \code{TRUE}, some components are flipped.
 Set to \code{TRUE} if PCA loadings are used. Default \code{PCA.flip = FALSE}.
 The flipping follows the rule:
\deqn{loading_i * (-score_i) = (-loading_i) * score_i}{loading[i] * (-score[i]) = (-loading[i]) * score[i]}
where \eqn{-loading_i}{-loading[i]} represents the i-th flipped loading.}

\item{sort}{Logical. Indicates if returned componenst must be sorted.
If \code{FALSE}, only additional tasks are performed.
Default is \code{TRUE}.}

\item{label.spc}{The new label for the matrix of loadings spectra. Default is
\code{"Comp. spectra"}.}

\item{wl.units}{The units of wavelength axis. Will be used as suffix to
values in columns \code{cNames} and \code{PeakAt}, if applicable.}
}
\value{
Either matrix (if \code{sp} is not provided) or
\code{hyperSpec} object with prepreocessed (sorted, flipped, named, etc.)
loadings.
In case of \code{hyperSpec} object, 3 columns
(\code{cNames} and \code{PeakAt}, \code{order.of.rows}) are added/overwritten.
}
\description{
Sort rows of \code{hyperSpoec} object by possition of maximum
 value in rows (in other words, sort component spectra, a.k.a. loadings, by
 possition of top peak) and do additional tasks:
 \enumerate{
     \item{If \code{sp} is provided, convert resulting matrix to corresponding
         \code{\link[=hyperSpec-class]{hyperSpec}} object by using function
         \code{\link[hyperSpec]{decomposition}}.}

     \item{If \code{PCA.flip = TRUE} and \code{sp} is provided, flip the
     loadings of a component in respect with x axis if the mean of the
     component's scores is negative:
      (\code{sign(mean(Scores_of_component_i)) < 0})
         \code{loadings} and \code{sp} are used to calculate the scores.}
 }
}
\note{
spectra (object of class \code{\link[=hyperSpec-class]{hyperSpec}})
         which will be used to convert sorted loadings into
         \code{\link[=hyperSpec-class]{hyperSpec}} object.
}
\examples{
# Load data
library(spHelper)
data(Loadings2,package = "spHelper")

# ======================================================================
unsorted_loadings <- Loadings2[c(2,3,5,1,4),,]
unsorted_loadings # print unsorted

sortLoadings(unsorted_loadings) # print sorted

# ======================================================================

# Extract loadings as a matrix:
unsorted_loadings_matrix <- Loadings2[c(2,3,5,1,4),,][[]]

# returns a matrix -----
L1 <- sortLoadings(unsorted_loadings_matrix)
class(L1)
## [1] "matrix"

# returns a hyperSpec object -----
L2 <- sortLoadings(unsorted_loadings_matrix, Spectra2)
class(L2)
## [1] "hyperSpec"
# ======================================================================
}
\seealso{
\code{\link[hyperSpec]{decomposition}}

Other component analysis / factorisation related functions in \pkg{spHelper}: 
\code{\link{getScores}()},
\code{\link{infoDim}()},
\code{\link{plot_spDiff}()},
\code{\link{qplot_infoDim}()},
\code{\link{qplot_kAmp}()},
\code{\link{qplot_kSp}()},
\code{\link{qplot_spc}()},
\code{\link{reconstructSp}()},
\code{\link{unipeak}()},
\code{\link{whichOutlier}()}
}
\author{
Vilmantas Gegzna
}
\concept{component analysis / factorisation related functions in \pkg{spHelper}}
