% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sp_class_perform.R, R/sp_class_perform_cv.R
\name{sp_class_perform}
\alias{sp_class_perform}
\alias{sp_class_perform_cv}
\alias{print.sp_class_perform_cv}
\alias{print.sp_classif_performance}
\alias{predict.sp_classif_performance}
\alias{sp_classification_performance}
\alias{sp_compare_gr_wl}
\alias{class_perform_sp}
\title{[.!] Compare spectra of groups at each wavelength}
\usage{
sp_class_perform(sp, by = stop("Parameter 'by' is missing."),
  measure = c("auc", "bac", "j", "sesp", "tpr"))

sp_class_perform_cv(sp, by = stop("Parameter 'by' is not specified."),
  measure = c("sesp", "j", "tpr")[1], cvo = cvo_create_folds(sp, by,
  seeds), seeds = NULL, sp_test = NULL)

\method{print}{sp_class_perform_cv}(obj)

\method{print}{sp_classif_performance}(obj)

\method{predict}{sp_classif_performance}(object, newdata,
  what = c("values", "performance"), ...)

sp_classification_performance(sp,
  by = stop("Parameter 'by' is not specified."), measure = c("sesp",
  "j", "tpr")[1], cvo = cvo_create_folds(sp, by, seeds), seeds = NULL,
  ...)

sp_compare_gr_wl(sp, by = stop("Parameter 'by' is missing."),
  measure = c("auc", "j", "sesp", "tpr"), ...)

class_perform_sp(sp, by = stop("Parameter 'by' is missing."),
  measure = c("auc", "j", "sesp", "tpr"), ...)
}
\arguments{
\item{sp}{\code{\link[=hyperSpec-class]{hyperSpec}} object.}

\item{by}{A vector (factor variable) with indicated groups for each case:
either variable name inside the object \code{sp}, or a vector
of length \code{nrow(sp)}.}

\item{measure}{string with measure of classification performance. Currently
 available options:\cr
"auc"   - AUC (default) area under the ROC curve;\cr
"j"     - Youden's index;\cr
"bac"   - Balanced accuracy (mean of Sensitivity (Se) and Specificity (Sp)).\cr
\cr
"sesp"  - [DEPRECATED!] The same as "bac";\cr
"tpr"   - [DEPRECATED!] The same as "bac";\cr
"kappa" - [SLOW, DO NOT USE IT] Cohen's kappa.}

\item{cvo}{a cross-validation object (cvo), created with function
\code{\link{cvo_create_folds}},\code{\link[caret]{createFolds}}
or similar.}
}
\value{
Fields of \code{sp_classif_performance} object: \cr

 \bold{type} type of data used ("Training data");\cr
 \bold{performance} - \code{hyperSepc} object with performance estimates;\cr
 \bold{cutoffs} - \code{hyperSepc} object with estimates of critical values
                   (cut-off points);\cr
 \bold{means} - \code{hyperSepc} object with means of each compared group;\cr
 \bold{means.description} - type of those means
                            ("10\% trimmed mean (of each group)");\cr
 \bold{compared_by_var} - variable name, that was used for grouping; \cr
 \bold{measure}- measure of performance. \cr \cr

Fields of \code{sp_class_perform_cv} object: \cr

 \bold{data} - a \code{hyperSpec} object with data used in calculations; \cr
 \bold{cvo} - cross-validation object used for analysis;  \cr
 \bold{train_performance} - performance estimates of training datasets for each repetition and fold; \cr
 \bold{test_performance} - performance estimates of testing datasets for each repetition and fold; \cr
 \bold{cutoffs} - estimates of cut-off values for each repetition and fold;\cr
 \bold{obj} - a list of \code{sp_classif_performance} objects for each repetition and fold; \cr
}
\description{
Compare spectra of each pair of indicated groups at each wavelength.
}
\examples{
library(spHelper)
library(spPlot)
library(ROCR)

sp <- sp_filter(Spectra2)

# Default measure of performace is AUC:
sp_compared <- sp_class_perform(sp, "class")

sp_compared <- sp_class_perform(sp, "class", measure = "bac")

names(sp_compared)
  ##  [1] "type"   "performance"  "cutoffs"  "means"
  ##  [5] "means.description" "compared_by_var"   "measure"

sp_compared$performance

  ##  hyperSpec object
  ##     6 spectra
  ##     2 data columns
  ##     501 data points / spectrum
  ##  wavelength: lambda/nm [integer] 300 301 ... 800
  ##  data:  (6 rows x 2 columns)
  ##     1. spc: Mean of Se and Sp [matrix501] 0.6266667 0.7310526 ... 0.5763674
  ##     2. Compared: Compared groups [character] K vs. l K vs. N ... N vs. S1

sp_compared$cutoffs

  ##  hyperSpec object
  ##     6 spectra
  ##     2 data columns
  ##     501 data points / spectrum
  ##  wavelength: lambda/nm [integer] 300 301 ... 800
  ##  data:  (6 rows x 2 columns)
  ##     1. spc: Cut-offs [matrix501] 162.3499 151.5054 ... 19.60151
  ##     2. Compared: Compared groups [character] K vs. l K vs. N ... N vs. S1


theme_set(theme_bw())
ggplot(sp_compared$performance, aes(color = Compared)) + geom_line()

ggplot(sp_compared$cutoffs, aes(color = Compared)) + geom_line()

qplot_sp(sp_compared$performance, by = "Compared") + set_ggLims(c(.45,1),"y")


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sp2 <- Spectra2[,,500~510]
sp_compared_cv <- sp_class_perform_cv(Sp2, "class")

names(sp_compared_cv)
  ## [1] "data"              "cvo"      "train_performance"
  ## [4] "test_performance"  "cutoffs"  "obj"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\dontrun{\donttest{
rez <- sp_class_perform_cv(sp = Spectra2, by = "gr")

rez
}}

}
\seealso{
Other \pkg{spHelper} functions for spectroscopy and \pkg{hyperSpec}: \code{\link{IQR_outliers}},
  \code{\link{binning}}, \code{\link{file}},
  \code{\link{gapDer}}, \code{\link{hy2mat}},
  \code{\link{hyAdd_Label_wl}},
  \code{\link{hyAdd_Labels_PAP_PD_2014}},
  \code{\link{hyAdd_Labels_TD2009}}, \code{\link{hyAdd}},
  \code{\link{hyDrop_NA}}, \code{\link{hyGet_palette}},
  \code{\link{hyRm_palette}}, \code{\link{mad_outliers}},
  \code{\link{mean_Nsd}}, \code{\link{median_Nmad}},
  \code{\link{plot_hyPalette}},
  \code{\link{prepare_PAP_RK_2014__MATLAB_failui}},
  \code{\link{read.OOIBase32}},
  \code{\link{read.OceanView.header}},
  \code{\link{read.OceanView}}, \code{\link{read.sp.csv2}},
  \code{\link{read3csv2hy}}, \code{\link{replace_spc}},
  \code{\link{sd_outliers}}, \code{\link{spStat}}
}
\author{
Vilmantas Gegzna
}
\concept{\pkg{spHelper} functions for spectroscopy and \pkg{hyperSpec}}
